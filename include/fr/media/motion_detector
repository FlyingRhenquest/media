/**
 * Copyright 2019 Bruce Ide
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * This is a very simple motion detector. The intent it to keep an eye
 * on a room or space and track motion through it. This specific
 * use case takes a background image that is the room with nothing
 * going on in it and a current image from a video camera and diffs
 * the images. If it finds significant change, it'll notify via a
 * boost signal that motion has been detected.
 *
 * Since we're using opencv, this object will subscribe to frame2cv
 * to get the current image.
 */

#ifndef _HPP_MOTION_DETECTOR
#define _HPP_MOTION_DETECTOR

#include <boost/signals2.hpp>
#include <boost/log/trivial.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>
#include <memory>
#include <vector>

#include "frame2cv"

namespace fr {

  namespace media {

    /**
     * Detects motion against a static background.
     * Create with background image and subscribe to
     * frame2cv to get current image. This object
     * will grayscale the background and current
     * images for processing.
     *
     * If you pass it an empty cv::Mat (which is
     * the default for the constructor,) the
     * first image we receive will be used as
     * the background.
     */
    
    class static_bg_motion_detector {

      // Background image (will convert to grayscale)
      cv::Mat background_image;

      // Keep track of the number of frames we've processed so far.
      // Frame counter will be included in the signal. Frame
      // counter is incremented each time we process a frame,
      // whether or not motion is detected.
      size_t frame_counter;

      // Hold frame2cv connection so we can unsubscribe
      // on destructor.
      boost::signals2::connection subscription;

      // Filter on contour area so we don't report image noise
      size_t min_area;

      // We do this in a couple of places, so I'll make a function
      // for it. Arguably I could make this return a cv::Mat and
      // use it to convert all my frames in frame2cv_callback,
      // but I want that code to be clear and easy to read,
      // so I don't want to bounce around too much.      
      
      void init_bg(cv::Mat background)
      {
	cv::Mat current_bw;
	// Convert to gray if we have a color image
	if (background.channels() > 1) {
	  cv::cvtColor(background, current_bw, cv::COLOR_BGR2GRAY);
	} else {
	  current_bw = background.clone();
	}
	// Blur background to reduce the possibility of camera noise
	// causing false positives
	cv::GaussianBlur(current_bw, background_image, cv::Size(3, 3), 0);
      }
      
      // Motion detection takes place here

      void frame2cv_callback(cv::Mat current_frame)
      {
	// I could make a case for not incrementing frame counter
	// if we set this frame as the background, but it's
	// still a processed frame, so I'll count it.
	frame_counter++;
	
	if (background_image.empty()) {
	  // Take first image we receive and use it as background
	  init_bg(current_frame);
	  // No point in comparing it against itself.
	  return;
	}

	cv::Mat frame_gray;
	// Convert to gray if needed
	if (current_frame.channels() > 1) {
	  cv::cvtColor(current_frame, frame_gray, cv::COLOR_BGR2GRAY);
	} else {
	  frame_gray = current_frame;
	}

	// Blur to reduce camera noise false positives
	cv::Mat blurred_frame;
	cv::GaussianBlur(frame_gray, blurred_frame, cv::Size(3,3), 0);

	// Diff against bg
	cv::Mat diff;
	cv::absdiff(background_image, blurred_frame, diff);

	cv::Mat diff_thresh;
	cv::threshold(diff, diff_thresh, 25, 255, cv::THRESH_BINARY);
	
	// Dilate to make differences more evident
	cv::Mat diff_bigger;
	cv::dilate(diff_thresh, diff_bigger, cv::Mat(), cv::Point(-1, 1), 2, 1, 1);
	std::vector<std::vector<cv::Point>> contours;
	std::vector<cv::Vec4i> hierarchy;
	
	cv::findContours(diff_bigger, contours, hierarchy, cv::RETR_TREE, cv::CHAIN_APPROX_SIMPLE, cv::Point(0,0));	
	
	if (contours.size() > 0) {	  
	  // All these parameters are invalid as soon as your callback returns,
	  // so copy them if you plan to use them past that point.
	  for (auto contour : contours) {
	    double area = cv::contourArea(contour);
	    if (area > min_area) {
	      available(current_frame, frame_counter, contours);
	      return;
	    }
	  }
	}
      }

    public:

      typedef std::shared_ptr<static_bg_motion_detector> pointer;

      /**
       * Available gets called with the original frame we received from
       * frame2cv (not the grayscale one we were working with,)
       * frame number and a vector of contours detected by OpenCV.
       * This only gets called if motion is detected.
       */
      boost::signals2::signal<void(cv::Mat, size_t, std::vector<std::vector<cv::Point>>)> available;
      
      static pointer create(cv::Mat background = cv::Mat(), double min_area = 30000.0)
      {
	return std::make_shared<static_bg_motion_detector>(background);
      }
				   
      static_bg_motion_detector(cv::Mat background = cv::Mat(), double min_area = 30000.0) : frame_counter(0l), min_area(min_area)
      {
	if (background.empty()) {
	  // Use first frame of video we receive as background
	  return;
	}
	init_bg(background);
      }

      ~static_bg_motion_detector()
      {
	subscription.disconnect();
      }

      // Subscribe to frame2cv object (In a variety of ways)
      void subscribe(frame2cv::pointer src)
      {
	// Pass ::pointer and reference subscribes through
	// to raw pointer subscribe
	// Also make sure we're getting a valid object because
	// I'm paranoid
	if (nullptr == src.get()) {
	  // Should throw or return an error or something in production code
	  BOOST_LOG_TRIVIAL(error) << "Received a null shared ptr. Not subscribing.";
	  return;
	}	    
	subscribe(src.get());
      }

      void subscribe(frame2cv &src)
      {
	subscribe(&src);
      }

      // Raw ptr one is the lowest common denominator
      void subscribe(frame2cv *src) {
	if (nullptr == src) {
	  // NOPE!
	  BOOST_LOG_TRIVIAL(error) << "Received a null ptr. Not subscribing.";
	  return;
	}
	// Yes, I'm finally switching from bind to a lambda
	subscription = src->available.connect([this](cv::Mat frame) { this->frame2cv_callback(frame); });
      }

      // Include unsubscribe function if we want to do it manually
      void unsubscribe()
      {
	subscription.disconnect();
      }
      
    };

  }
}

#endif
